import { Configuration, OpenAIApi } from "openai";

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

export default async function (req, res) {
  if (!configuration.apiKey) {
    res.status(500).json({
      error: {
        message: "OpenAI API key not configured, please follow instructions in README.md",
      }
    });
    return;
  }

  const animal = req.body.animal || '';
  if (animal.trim().length === 0) {
    res.status(400).json({
      error: {
        message: "Please enter a valid animal",
      }
    });
    return;
  }

  try {
    // TODO lvlv this is where the open api API is called (your frontend is making a request to their backent)
    const completion = await openai.createCompletion({
      model: "text-davinci-003",
      prompt: generatePrompt(animal),
      temperature: 0.6,
    });
    console.log('got 200')
    res.status(200).json({ result: completion.data.choices[0].text });
  } catch(error) {
    console.log('got error ', error)
    // Consider adjusting the error handling logic for your use case
    if (error.response) {
      console.error(error.response.status, error.response.data);
      res.status(error.response.status).json(error.response.data);
    } else {
      console.error(`Error with OpenAI API request: ${error.message}`);
      res.status(500).json({
        error: {
          message: 'An error occurred during your request.',
        }
      });
    }
  }
}

function generatePrompt(animal) {
  const capitalizedAnimal =
    animal[0].toUpperCase() + animal.slice(1).toLowerCase();
  return `Suggest three names for an animal that is a superhero.

Animal: Cat
Names: Captain Sharpclaw, Agent Fluffball, The Incredible Feline
Animal: Dog
Names: Ruff the Protector, Wonder Canine, Sir Barks-a-Lot
Animal: ${capitalizedAnimal}
Names:`;
}
let coverLetter = "Dear Hiring Manager,\n\nI am excited to apply for the [Job Title] position at [Company Name]. As a [relevant experience or skills], I believe I would make a valuable addition to the team. Thank you for considering my application.\n\nSincerely,\n[Your Name]";

let jobListingsWithCoverLetters = jobListings.map(async (jobListing) => {
  // TODO lvlv you could call openai here but you'd need to use async/await or some other way of handling async API calls
  // the function is already marked 'async' so you just need to use keyword 'await', ex:
  //that means it'll wait for 
  //
  try {
    const whatever = await openai.createCompletion({
      model: "text-davinci-003",
      prompt: generatePrompt(animal),
      temperature: 0.6,
    });
  } catch(err) {
    console.error('error ', err)
  }

  // lvlv this would be using chat gpts suggestion but only modifying cover letter on the job listing
  jobListing.coverLetter =  coverLetter.replace("[Job Title]", jobListing.jobTitle).replace("[Company Name]", "XYZ Company").replace("[relevant experience or skills]", "strong communicator and problem solver")
  return jobListing;
  // lvlv the below was generated by chat gpt
  // let jobTitleWithCoverLetter = jobListing.jobTitle + " Cover Letter";
  // let coverLetterLink = jobListing.jobLink + "/coverletter";
  // return {
  //   "jobTitle": jobTitleWithCoverLetter,
  //   "jobLink": coverLetterLink,
  //   "lastViewed": jobListing.lastViewed,
  //   "dateApplied": jobListing.dateApplied,
  //   "coverLetter": coverLetter.replace("[Job Title]", jobListing.jobTitle).replace("[Company Name]", "XYZ Company").replace("[relevant experience or skills]", "strong communicator and problem solver")
  // };
});
